module IcsMultipartAttached
  attr_accessor :ics_payload

  def mail(*args)
    ics = ics_payload.present? ? IcalHelpers::Ics.from_payload(ics_payload) : nil

    # Sending icalendar events by email is complicated, buggy and unreliable. This is the result of various hacks.
    # * We add the icalendar twice to the email: once as a text/calendar part with a method, once as an attached .ics file.
    # * The method is always PUBLISH: we don’t want any replies.
    # * the text/calendar part is base64 encoded, although  “quoted-printable would be more adapted but there seems to be an encoding problem with extra =0D” (?)

    # https://github.com/betagouv/rdv-solidarites.fr/pull/933
    # https://github.com/betagouv/rdv-solidarites.fr/pull/729

    # ics, generated by the ICalendar lib, uses CRLF separators as specified in rfc2445
    # in google calendar emails, there are two icalendar parts.
    # * The ics file is base64 encoded, and uses CRLF
    # * The text/calendar part is quoted-printable, but only uses LF
    # Additionally, google calendar uses two level of multiparts:
    # - multipart/alternative
    #   - multipart/alternative
    #     - text/plain
    #     - text/html
    #     - text/calendar
    #   - application/ics
    # Maybe we should add the custom part to the first existing part instead of the message.

    # Attachment
    if ics.present?
      message.attachments[ics_payload[:name]] = {
        mime_type: "application/ics",
        content: Base64.encode64(ics),
        encoding: "base64"
      }
    end

    message = super


    # Separate part
    if ics.present?
      message.add_part(
        Mail::Part.new do
          content_type "text/calendar; method=#{"PUBLISH"}; charset=utf-8"
          body ics
        # This is quoted-printable by default, which is a problem because ics uses CRLF.
        # quoted-printable.rb uses “pack("M")”
        # which means quoted printable, MIME encoding (see also RFC2045) (text mode but input must use LF and output LF)
        # which gives `=OD\n`
        # and zimbra fucks up when decoding it becauses it gives only `\r`
        # which makes the icalendar java library choke.
        end
      )
    end

    message
  end
end
